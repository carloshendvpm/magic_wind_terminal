#!/usr/bin/env ruby
require "ruby_llm"
require "dotenv/load"

begin
  RubyLLM.configure do |config|
    config.gemini_api_key = ENV['GOOGLE_API_KEY']
  end
rescue => e
  puts "Erro na configura√ß√£o: #{e.message}"
  exit 1
end

if ENV['GOOGLE_API_KEY'].nil? || ENV['GOOGLE_API_KEY'].empty?
  puts "‚ö†Ô∏è  GOOGLE_API_KEY n√£o encontrada no arquivo .env"
  puts "Opsss √© necess√°rio adicionar sua chave da API do Google Gemini no arquivo .env"
  exit 1
end

begin
  base_chat = RubyLLM.chat(model: "gemini-2.5-flash")
  
  system_instructions = <<~INSTRUCTIONS
    Voc√™ √© um assistente especializado em converter comandos em linguagem natural (portugu√™s) 
    para comandos Unix/Linux v√°lidos e seguros.

    REGRAS IMPORTANTES:
    - Responda SEMPRE apenas com o comando, sem explica√ß√µes
    - Use comandos seguros e n√£o destrutivos
    - Para listagem de arquivos, prefira 'ls -la' 
    - Para busca de texto, use 'grep -r' quando apropriado
    - Se n√£o souber o comando exato, sugira a alternativa mais segura
    - NUNCA use comandos como 'rm -rf /', 'dd', 'format', ou outros destrutivos
    - Prefira comandos que n√£o modificam o sistema permanentemente
    
    Exemplos:
    - "listar arquivos" ‚Üí ls -la
    - "procurar arquivo" ‚Üí find . -name
    - "ver conte√∫do" ‚Üí cat
    - "criar diret√≥rio" ‚Üí mkdir
  INSTRUCTIONS
  
  chat = base_chat.with_instructions(system_instructions).with_temperature(0.2)
  puts "‚úÖ Conectado ao modelo: Gemini 2.5 Flash"
rescue => error
  puts "‚ùå Erro ao conectar com Gemini: #{error.message}"
  exit 1
end

puts "\nü§ñ Magic Wind CLI"
puts "Digite comandos em linguagem natural e eles ser√£o convertidos em comandos de terminal Unix/Linux"
puts "Digite 'sair', 'quit' ou 'exit' para encerrar"
puts "Digite 'ajuda' para ver exemplos"
puts "üí° Dica: Crie um arquivo 'context.md' para fornecer contexto adicional aos comandos\n\n"

loop do
  print "üí¨ > "
  
  begin
    input = gets&.strip
    break if input.nil? 
    
    case input.downcase
    when "sair", "quit", "exit"
      puts "üëã Tchau!"
      break
    when "ajuda", "help"
      puts <<~HELP
        
        üìã Exemplos de comandos:
        ‚Ä¢ "listar arquivos" ‚Üí ls
        ‚Ä¢ "mostrar diret√≥rio atual" ‚Üí pwd
        ‚Ä¢ "criar pasta teste" ‚Üí mkdir teste
        ‚Ä¢ "ver conte√∫do do arquivo" ‚Üí cat arquivo.txt
        ‚Ä¢ "procurar por texto" ‚Üí grep "texto" arquivo
        
        üí° Contexto personalizado:
        ‚Ä¢ Crie um arquivo 'context.md' no diret√≥rio atual
        ‚Ä¢ Adicione informa√ß√µes sobre seu projeto, aliases, caminhos comuns
        ‚Ä¢ O CLI usar√° esse contexto para comandos mais precisos
        
      HELP
      next
    when ""
      next
    end

    print "üîÑ Processando... "
    
    context = ""
    if File.exist?("context.md")
      context = File.read("context.md")
    end

    prompt = if context.empty?
      "#{input}"
    else
      <<~PROMPT
        Contexto do projeto:
        #{context}

        Instru√ß√£o: #{input}
      PROMPT
    end

    response = chat.ask(prompt)
    command = response.content.strip.gsub(/^`|`$/, '').strip
    
    puts "\r‚ú® Comando: #{command}"
    
    print "üöÄ Executar? (s/N): "
    
    confirm = gets&.strip&.downcase
    if confirm == "s" || confirm == "sim" || confirm == "y" || confirm == "yes"
      puts "üìã Executando: #{command}"
      success = system(command)
      puts success ? "‚úÖ Conclu√≠do" : "‚ùå Erro na execu√ß√£o"
    else
      puts "‚è≠Ô∏è  Comando cancelado"
    end
    
    puts
    
  rescue Interrupt
    puts "\nüëã Interrompido pelo usu√°rio"
    break
  rescue => e
    puts "\n‚ùå Erro: #{e.message}"
  end
end
